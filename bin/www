#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('IM:server');
var http = require('http');
var mongo = require('mongodb').MongoClient;

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io')(server);

/**
* Mongo connection string
*/

var mongoUri = "mongodb://127.0.0.1/chat-app";

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(app.get('port'), function () {
	console.log('Express server listening on http://localhost:' + app.get('port'));
});
server.on('error', onError);
server.on('listening', onListening);

/**
* Listen for client connection
*/

io.on('connection', function (socket) {
	console.log('a user connected');
	
	// Load last 10 messages
	mongo.connect(mongoUri, function (err, db) {
		if(err) {	console.warn(err.message); }
		else {
			var collection = db.collection('messages'),
					stream = collection.find().sort().limit(10).stream();
			stream.on('data', function (chat) {
				console.log('emitting chat');
				socket.emit('chat', chat);
			})
		}
	});
	
	socket.on('disconnet', function () {
		console.log('user disconnected');
	});
	
	// Listen to client chat channel
	socket.on('chat', function (msg) {
		mongo.connect(mongoUri, function (err, db) {
			if(err) {	console.warn(err.message); }
			else {
				var collection = db.collection('messages');
				collection.insert({user: msg.user, content: msg.content }, function (err, o) {
					if (err) { console.warn(err.message);}
					else { console.log('Chat message saved: ', msg.user, ": ", msg.content);}
				});
			}
		});
		// Broadcast to every client on this channel.
		socket.broadcast.emit('chat', msg);
	});
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
		return val; // named pipe
  }

  if (port >= 0) {
		return port; // port number
  }

	return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
	if (error.syscall !== 'listen') {
		throw error;
	}

	var bind = typeof port === 'string' ?
			'Pipe ' + port : 'Port ' + port;

	// handle specific listen errors with friendly messages
	switch (error.code) {
		case 'EACCES':
			console.error(bind + ' requires elevated privileges');
			process.exit(1);
			break;
		case 'EADDRINUSE':
			console.error(bind + ' is already in use');
			process.exit(1);
			break;
		default:
			throw error;
	}
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
			'pipe ' + addr : 'port ' + addr.port;
	
  debug('Listening on ' + bind);
}
